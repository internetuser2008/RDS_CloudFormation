AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
# Requirment: 1. Optional KMS.yml stack to be deployed  
# Requirment: 2. Prior VPC & Subnetgroup

Description: This template deploys RDS Postgres by Bimal

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Network Config'
      Parameters:
      - pgVpcId
      - pgDatabaseSubnetGroupName
      - pPGSecurityGroup   
      - PrivateSGCIDR01
      - PrivateSGCIDR02
    - Label:
        default: 'DB Engine Settings'
      Parameters:
      - DBSnapshotIdentifier
      - ParentKmsKeyStack
      - pgPostgresVersion
      - pgAllocatedStorage
      - pgMaxAllocatedStorage
      - pgDBName
      - pgMasterUser
      - pgDBInstanceClass      
    - Label:
        default: 'Maintenance Settings'
      Parameters:        
      - OptionalReadReplica
      - pgDBInstanceClassReader
      - pgBackupRetentionPeriod
      - PreferredBackupWindow
      - PreferredMaintenanceWindow
      - CWLogRetention
      - OptionalSecretsRotation
      - ReplicateSecretsCrossRegion
      - TargetRegion
      
Parameters:
    pgDBName:
      Description: The Database name min 5 characters
      Type: String
      MinLength: '5'
      MaxLength: '64'
      AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
      ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
      Default: BimalDBATest

    pgPostgresVersion:
      Description: Select Database Engine Version
      Type: String
      AllowedValues: ['12.0', '11.6', '11.1', '10.10', '10.6', '9.6.15']
      Default: 11.6
      
    pgMasterUser:
      Description: Database master user account
      Type: String
      MinLength: '5'
      MaxLength: '64'
      AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
      Default: Bimalpgadminaws

    pgEngine:
      Description: Database master user account
      Type: String
      AllowedValues: [ 'aurora', 'aurora-mysql', 'mysql', 'mariadb', 'aurora-postgresql', 'postgres' ]
      Default: 'postgres'

    pgBackupRetentionPeriod:
      Description: Backup Retention period in Days [0-35days]
      Type: Number
      MinValue: '0'
      MaxValue: '35'
      Default: 7

    CWLogRetention:
      Description: CloudWatch Log Retention period in Days [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
      Type: Number
      MinValue: '1'
      MaxValue: '3653'
      Default: 365
      
    pgAllocatedStorage:
      Description: Allocated Storage in GB
      Type: Number
      Default: 100
    pgMaxAllocatedStorage:
      Description: Allocated Max Storage in GB to scale out
      Type: Number
      Default: 200

    pgDBInstanceClass:
      Description: Instance Class Size, ability to increase (t=Burstable; r=memory-intensive)
      Type: String
      Default: db.t2.small
      AllowedValues:
        - db.t2.small
        - db.t2.medium
        - db.t2.large
        - db.t2.xlarge
        - db.t2.2xlarge
        - db.r4.large
        - db.r4.xlarge
        - db.r4.2xlarge
        - db.r4.4xlarge
        - db.r4.8xlarge
        - db.r4.16xlarge

    pgDBInstanceClassReader:
      Description: OPtional - Reader instance class size, ability to increase (t=Burstable; r=memory-intensive)
      Type: String
      Default: db.t2.small
      AllowedValues:
        - db.t2.small
        - db.t2.medium
        - db.t2.large
        - db.t2.xlarge
        - db.t2.2xlarge
        - db.r4.large
        - db.r4.xlarge
        - db.r4.2xlarge
        - db.r4.4xlarge
        - db.r4.8xlarge
        - db.r4.16xlarge

    pgDatabaseSubnetGroupName:
      Description: RDS DB Subnets group required for MultiAZ
      Type: List<AWS::EC2::Subnet::Id>
      Default: subnet-0884acc859d1d7d96,subnet-0be98289606952c74,subnet-057c566610fd6c873,subnet-0c9241c928fba8e1e,subnet-04b9e49fb90c35588,subnet-058aeba38b2b46b4e

    pPGSecurityGroup:
      Description: RDS DB Subnets group required for MultiAZ
      Type: AWS::EC2::SecurityGroup::Id
      Default: sg-04b4c4fd8648ea18e  
      
    pgVpcId:
      Description: VPC ID
      Type: AWS::EC2::VPC::Id
      Default: vpc-0926b2ae7520a831b

    ParentKmsKeyStack:
      Description: 'Optional parent KMS key output value (ignored when DBSnapshotIdentifier is set, value used from snapshot).'
      Type: String
      Default: 'DBCustomKey'

    PreferredBackupWindow:
      Description: 'The daily time range in UTC during which you want to create automated backups.'
      Type: String
      Default: '09:54-10:24'
  
    PreferredMaintenanceWindow:
      Description: The weekly time range (in UTC) during which system maintenance can occur.
      Type: String
      Default: 'sat:07:00-sat:07:30'
    
    DBSnapshotIdentifier:
      Description: 'If restoring from snapshot (leave blank to create new).'
      Type: String
      Default: ''           
    OptionalReadReplica:
      Description: 'Optional Deploy Read Replica'
      Type: String
      Default: "no"
      AllowedValues: ["yes", "no"]
    PrivateSGCIDR01:
      Description: "CIDR block for private subnet used for RDS Communication "
      Type: String
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[0-9]|2[0-8]))$"
      ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/01-28"
      Default: 183.16.0.0/12
    PrivateSGCIDR02:
      Description: "CIDR block for private subnet used for RDS Communication"
      Type: String
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[0-9]|2[0-8]))$"
      ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/02-28"
      Default: 122.43.157.128/26

    OptionalSecretsRotation:
      Description: 'Optional Create Secret Rotation Lambda Function 89days db master account'
      Type: String
      Default: "yes"
      AllowedValues: ["yes", "no"]
     
    ReplicateSecretsCrossRegion:
      Description: 'Optional deploy Secrets replication cross region'
      Type: String
      Default: "no"
      AllowedValues: ["yes", "no"]
    TargetRegion:
      Type: String
      Description: Region to replicated secrets
      AllowedValues: [ "us-east-1", "us-east-2", "us-west-1", "us-west-2" ] 

Conditions:
  HasKmsKey: !Not [!Equals [!Ref ParentKmsKeyStack, '']]
  HasKmsKey1: !Equals [!Ref ParentKmsKeyStack, ""]
  HasDBSnapshotIdentifier: !Not [!Equals [!Ref DBSnapshotIdentifier, '']]
  HasKmsKeyAndNotDBSnapshotIdentifier: !And [!Condition HasKmsKey, !Not [!Condition HasDBSnapshotIdentifier]] 
  EnableReadReplica: !Equals [!Ref OptionalReadReplica, "yes" ]
#  EnableCrossRegionReadReplica: !Equals [!Ref OptionalCrossRegionReadReplica, "yes" ]
  EnableSecretsFunction: !Equals [!Ref OptionalSecretsRotation, "yes" ]  
  ReplicateSecretsCrossRegion: !Equals [!Ref ReplicateSecretsCrossRegion, "yes" ]    
Mappings: 
  DBFamilyMap: 
    "9.6.15": 
      "family": "postgres9.6"
    "10.10": 
      "family": "postgres10" 
    "10.6": 
      "family": "postgres10"       
    "11.1":
      "family": "postgres11"
    "11.6":
      "family": "postgres11"      
    "12.0":
      "family": "postgres12" 
Resources:
    rRDSKMSCMK:
      Condition: HasKmsKey1
      Type: 'AWS::KMS::Key'
#      DeletionPolicy: Retain
      Properties:
        KeyPolicy:
          Version: '2012-10-17'
          Statement:
          - Sid: "Enable root"
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: "Allow use of the Key"
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
            - 'kms:Encrypt'
            - 'kms:Decrypt'
            - 'kms:ReEncrypt*'
            - 'kms:GenerateDataKey*'
            - 'kms:CreateGrant'
            - 'kms:ListGrants'
            - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Ref 'AWS::AccountId'
                'kms:ViaService': !Sub 'rds.${AWS::Region}.amazonaws.com'
          - Sid: "Allow All to use all on key"
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 'kms:*'
            Resource: '*'
    RDSKMSCMKAlias:
      Condition: HasKmsKey1
      Type: 'AWS::KMS::Alias'
#      DeletionPolicy: Retain
      Properties:
        AliasName: !Sub 'alias/${AWS::StackName}'
        TargetKeyId: !Ref rRDSKMSCMK
        
    rDBSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
          DBSubnetGroupDescription: !Sub "${AWS::StackName}-${AWS::Region}-TheSubnetGroupCreated CF Stack"
          DBSubnetGroupName: !Sub "${AWS::StackName}-${AWS::Region}-dbsubgroup"
          SubnetIds: !Ref pgDatabaseSubnetGroupName
          Tags:
            - Key: "Bimal:v1:environment"
              Value: !Sub
            - Key: "Bimal:v1:emergencyContact"
              Value: !Sub
     
    RDSDBAAwsMonitoringAccountRole:
      Type: AWS::IAM::Role
      Metadata:
        Comment: "CreatingTestRoleForMonit"
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
                Service:
                  - monitoring.rds.amazonaws.com
            Action:
            - sts:AssumeRole

    RDSDBAAwsMonitoringAccountPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: DBARDSMonitoringPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: EnableCreationAndManagementOfRDSCloudwatchLogGroups
              Action:
               - dynamodb:list*
               - dynamodb:describe*
               - ec2:Describe*
               - ec2:Get*
               - ecs:Describe*
               - ecs:List*
               - logs:Get*
               - logs:Describe*
               - logs:FilterLogEvents
               - logs:TestMetricFilter
               - logs:CreateLogGroup
               - logs:PutRetentionPolicy
               - rds:Describe*
               - rds:List*
               - tag:getResources
               - tag:getTagKeys
               - tag:getTagValues
              Effect: Allow
              Resource: "arn:aws:logs:*:*:log-group:/aws/rds/*"
            - Sid: EnableCreationAndManagementOfRDSCloudwatchLogStreams
              Action:
               - logs:CreateLogStream
               - logs:PutLogEvents
               - logs:DescribeLogStreams
               - logs:GetLogEvents        
              Effect: Allow
              Resource: "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*" 
        Roles: [!Ref RDSDBAAwsMonitoringAccountRole]
   
    rDBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: !Ref pgVpcId
        GroupName: !Join ['', [ !Sub "${AWS::StackName}", "-sg" ]]  
        GroupDescription: !Join [ "- ", [ "Allow inbound access to the DB created via Cloudformation Stack for db-", !Ref pgDBName ] ]
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: !FindInMap [EngineMap, !Ref Engine, Port] 
            ToPort: !FindInMap [EngineMap, !Ref Engine, Port]
            SourceSecurityGroupId: !Ref pPGSecurityGroup
          - IpProtocol: tcp
            FromPort: !FindInMap [EngineMap, !Ref Engine, Port] 
            ToPort: !FindInMap [EngineMap, !Ref Engine, Port]
            CidrIp: !Ref PrivateSGCIDR01            
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: !FindInMap [EngineMap, !Ref Engine, Port]
            ToPort: !FindInMap [EngineMap, !Ref Engine, Port]
            SourceSecurityGroupId: !Ref pPGSecurityGroup
          - IpProtocol: tcp
            FromPort: !FindInMap [EngineMap, !Ref Engine, Port] 
            ToPort: !FindInMap [EngineMap, !Ref Engine, Port]
            CidrIp: !Ref PrivateSGCIDR01
          # - IpProtocol: tcp
            # FromPort: !FindInMap [EngineMap, !Ref Engine, Port]
            # ToPort: !FindInMap [EngineMap, !Ref Engine, Port]
            # CidrIp: !Ref PrivateSGCIDR02
        Tags:
          - Key: Name
            Value: !Join ['', [ !Sub "${AWS::StackName}", "-sg" ]]
            
    rMyRDSSecret:
      Type: "AWS::SecretsManager::Secret"
      Properties:
        Name: !Join ['', [ !Sub "${AWS::StackName}-", !Ref pgDBName ]]
        Description: !Join [ "- ", [ "This is a Secrets Manager for an RDS DB instance via Cloudformation Stack", !Ref pgDBName ] ] 
        #KmsKeyId: !If [HasKmsKeyAndNotDBSnapshotIdentifier, {'Fn::ImportValue': !Sub '${ParentKmsKeyStack}'}, !Ref 'AWS::NoValue']
        GenerateSecretString:
          SecretStringTemplate: !Join ['', ['{"username": "', !Ref pgMasterUser, '"}']]
          GenerateStringKey: "password"
          PasswordLength: 16
          ExcludeCharacters: ".\"`'*@#()\\/;"
  
    rDBParamGroup:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: !Join [ "- ", [ "RDS PG Database Instance Parameter Group created via Cloudformation Stack ", !Ref pgDBName ] ]
        Family: !FindInMap [DBFamilyMap, !Ref pgPostgresVersion, "family"] 
        Parameters:
          shared_preload_libraries: auto_explain,pg_stat_statements,pg_hint_plan,pgaudit
          rds.force_ssl: 1
          rds.force_autovacuum_logging_level: "log"
          rds.force_admin_logging_level: "log"
          log_statement: "mod"
          log_connections: 1
          log_disconnections: 1
          log_lock_waits: 1
          log_min_duration_statement: 5000
          auto_explain.log_min_duration: 5000
          auto_explain.log_verbose: 1
          auto_explain.log_nested_statements: 1
          autovacuum_max_workers: 5
          log_rotation_age: 1440
          log_rotation_size: 102400
          rds.log_retention_period: 10080
          random_page_cost: 1
          track_activity_query_size: 16384
          idle_in_transaction_session_timeout: 7200000
          statement_timeout: 7200000
          search_path: '"$user",public'
          pgaudit.role: rds_pgaudit
          pgaudit.log_level: info
          pgaudit.log: 'ROLE,DDL'
          pgaudit.log_statement_once: 1
          wal_keep_segments: 250
          wal_compression: 1
          checkpoint_timeout: 900
          checkpoint_completion_target: 0.9 
          hot_standby_feedback: 1
          rds.restrict_password_commands: 1
          #password_encryption: 'scram-sha-256'
        
    rMasterDb:
      Type: AWS::RDS::DBInstance
      UpdateReplacePolicy: Snapshot      
      Properties:
        DBName: !Ref pgDBName
        DBInstanceIdentifier: !Join ['', [ !Sub "${AWS::StackName}", "-master" ]]
        AllocatedStorage: !Ref pgAllocatedStorage
        MaxAllocatedStorage: !Ref pgMaxAllocatedStorage
        AutoMinorVersionUpgrade: false
        BackupRetentionPeriod:  !Ref pgBackupRetentionPeriod
        DBInstanceClass: !Ref pgDBInstanceClass
        Engine: !Ref pgEngine
        VPCSecurityGroups:
          - !GetAtt rDBSecurityGroup.GroupId
        DBParameterGroupName: !Ref rDBParamGroup 
        MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref rMyRDSSecret, ':SecretString:username}}' ]]
        MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref rMyRDSSecret, ':SecretString:password}}' ]]
        DBSubnetGroupName: !Ref rDBSubnetGroup
        EngineVersion: !Ref pgPostgresVersion
#        KmsKeyId: !ImportValue DBCustomKey
        KmsKeyId: !If [HasKmsKeyAndNotDBSnapshotIdentifier, {'Fn::ImportValue': !Sub '${ParentKmsKeyStack}'}, !Ref 'AWS::NoValue']
        StorageType: gp2
        StorageEncrypted: !If [HasDBSnapshotIdentifier, !Ref 'AWS::NoValue', !If [HasKmsKey, true, false]]
        MultiAZ: true
        EnableIAMDatabaseAuthentication: true
        CopyTagsToSnapshot: true
        #DeletionProtection: true
        EnablePerformanceInsights: true
        PreferredBackupWindow: !Ref PreferredBackupWindow
        PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow        
        MonitoringInterval: 30
        MonitoringRoleArn: !GetAtt [RDSDBAAwsMonitoringAccountRole, Arn]
        EnableCloudwatchLogsExports: [ "postgresql" ]
        Tags:
        - Key: NodeType
          Value: Master Node

    MyCloudWatchLogExpireMaster:
      Type: 'AWS::Logs::LogGroup'
      Description: Log group for the RDS Master instance logs
      Properties:
        RetentionInDays: !Ref CWLogRetention
        LogGroupName: !Join ['', [ "/aws/rds/instance/",  !Sub "${AWS::StackName}-master/postgresql" ]]

    rReplicaDB:
      Condition: EnableReadReplica
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: !Join ['', [ !Sub "${AWS::StackName}", "-reader1" ]]
        SourceDBInstanceIdentifier: !Ref 'rMasterDb'
        DBInstanceClass: !Ref 'pgDBInstanceClassReader'
        StorageType: gp2
        EnablePerformanceInsights: true
        MonitoringInterval: 30
        MonitoringRoleArn: !GetAtt [RDSDBAAwsMonitoringAccountRole, Arn]        
        EnableCloudwatchLogsExports: [ "postgresql" ]
        Tags:
        - Key: NodeType
          Value: Read Replica Database

    MyCloudWatchLogExpireReplica:
      Condition: EnableReadReplica    
      Type: 'AWS::Logs::LogGroup'
      Description: Log group for the RDS Replica instance logs
      Properties:
        RetentionInDays: !Ref CWLogRetention
        LogGroupName: !Join ['', [ "/aws/rds/instance/",  !Sub "${AWS::StackName}-reader1/postgresql" ]]

    rSecretRDSInstanceAttachment:
       Type: AWS::SecretsManager::SecretTargetAttachment    
       Properties:
         SecretId: !Ref rMyRDSSecret
         TargetId: !Ref rMasterDb
         TargetType: AWS::RDS::DBInstance

    SecretResourcePolicy:
      Condition: EnableSecretsFunction
      Type: AWS::SecretsManager::ResourcePolicy   
      Properties:
        #Deny the DeleteSecerete action to all principals within the current account
        SecretId: !Ref rMyRDSSecret
        ResourcePolicy:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Deny"
              Principal:
                AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
              Action: "secretsmanager:DeleteSecret"
              Resource: "*"

    SecretRotationSchedule:
      Condition: EnableSecretsFunction
      Type: AWS::SecretsManager::RotationSchedule
      DependsOn:
          - rSecretRDSInstanceAttachment
      Properties:
        SecretId: !Ref rMyRDSSecret
        RotationLambdaARN: !GetAtt MyRotationServerlessApplication.Outputs.RotationLambdaARN
        RotationRules:
          AutomaticallyAfterDays: 89         

    #Serverless Application resource For details https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html
    MyRotationServerlessApplication:
      Condition: EnableSecretsFunction
      Type: AWS::Serverless::Application
      Properties:
        Location:
          ApplicationId: arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerRDSPostgreSQLRotationSingleUser
          SemanticVersion: 1.1.8
        Parameters:
          endpoint: !Sub 'https://secretsmanager.${AWS::Region}.${AWS::URLSuffix}'      
          functionName: !Sub '${AWS::StackName}-SecretRotationLambdApp'
                        #Convert Subnet & SeucrityGroup to String from list
          vpcSubnetIds: 
              Fn::Join:
              - ","
              - Ref: pgDatabaseSubnetGroupName
          vpcSecurityGroupIds: !Ref pPGSecurityGroup
              # Fn::Join:
              # - ","
              # - Ref: pPGSecurityGroup

    LambdaInvokePermission:
      Condition: EnableSecretsFunction
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt MyRotationServerlessApplication.Outputs.RotationLambdaARN
        Action: 'lambda:InvokeFunction'
        Principal: secretsmanager.amazonaws.com

    MyCloudWatchLogExpireLambda:
      Type: 'AWS::Logs::LogGroup'
      Description: Log group for the lambdaSecretsRotationRDS function's logs
      DependsOn: MyRotationServerlessApplication
      Properties:
        RetentionInDays: !Ref CWLogRetention
        LogGroupName: !Join ['', [ "/aws/lambda/",  !Sub "${AWS::StackName}-SecretRotationLambdApp" ]]

#####SecretReplication
    ReplicatorRole:
      Condition: ReplicateSecretsCrossRegion
      DependsOn: rMyRDSSecret      
      Type: AWS::IAM::Role
      Properties:
        RoleName: SecretsManagerRegionReplicatorRole
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Policies:
        - PolicyName: ReplicatorPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: KMSPermissions
              Effect: Allow
              Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
              Resource: "*"
            - Sid: SecretsManagerLocalRegion
              Effect: Allow
              Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
              Resource:
                Fn::Join:
                - ":"
                - - arn:aws:secretsmanager
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - secret:*
            - Sid: SecretsManagerRemoteRegion
              Effect: Allow
              Action:
              - secretsmanager:CreateSecret
              - secretsmanager:UpdateSecretVersionStage
              - secretsmanager:PutSecretValue
              - secretsmanager:DescribeSecret
              Resource:
                Fn::Join:
                - ":"
                - - arn:aws:secretsmanager
                  - Ref: TargetRegion
                  - Ref: AWS::AccountId
                  - secret:*
    ReplicatorLambdaFunction:
      Condition: ReplicateSecretsCrossRegion
      DependsOn: rMyRDSSecret      
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: SecretsManagerRegionReplicator
        Description: Replicates a secret to another region after a successful rotation
        MemorySize: 128
        Timeout: 30
        Handler: index.lambda_handler
        Role:
          Fn::GetAtt:
          - ReplicatorRole
          - Arn
        Runtime: python3.6
        Environment:
          Variables:
            TargetRegion:
              Ref: TargetRegion
            ReplicaKmsKeyArn:
              Ref: rMyRDSSecret
        Code:
          ZipFile:
            Fn::Join:
            - "\n"
            - - import boto3
              - from os import environ
              - ''
              - targetRegion = environ.get('TargetRegion')
              - 'if targetRegion == None:'
              - '    raise Exception(''Environment variable "TargetRegion" must be set'')'
              - ''
              - smSource = boto3.client('secretsmanager')
              - smTarget = boto3.client('secretsmanager', region_name=targetRegion)
              - ''
              - 'def lambda_handler(event, context):'
              - "    detail = event['detail']"
              - ''
              - "    print('Retrieving SecretArn from event data')"
              - "    secretArn = detail['additionalEventData']['SecretId']"
              - ''
              - '    print(''Retrieving new version of Secret "{0}"''.format(secretArn))'
              - "    newSecret = smSource.get_secret_value(SecretId = secretArn)"
              - "    "
              - "    secretName = newSecret['Name']"
              - "    currentVersion = newSecret['VersionId']"
              - ''
              - "    replicaSecretExists = True"
              - '    print(''Replicating secret "{0}" (Version {1}) to region "{2}"''.format(secretName,
                currentVersion, targetRegion))'
              - "    try:"
              - "        smTarget.put_secret_value("
              - "            SecretId = secretName,"
              - "            ClientRequestToken = currentVersion,"
              - "            SecretString = newSecret['SecretString']"
              - "        )"
              - "        pass"
              - "    except smTarget.exceptions.ResourceNotFoundException:"
              - '        print(''Secret "{0}" does not exist in target region "{1}".
                Creating it now with default values''.format(secretName, targetRegion))'
              - "        replicaSecretExists = False"
              - "    except smTarget.exceptions.ResourceExistsException:"
              - '        print(''Secret version "{0}" has already been created, this
                must be a duplicate invocation''.format(currentVersion))'
              - "        pass"
              - "    "
              - "    if replicaSecretExists == False:"
              - "        secretMeta = smSource.describe_secret(SecretId = secretArn)"
              - "        if secretMeta['KmsKeyId'] != None:"
              - "            replicaKmsKeyArn = environ.get('ReplicaKmsKeyArn')"
              - "            if replicaKmsKeyArn == None:"
              - '                raise Exception(''Cannot create replica of a secret
                that uses a custom KMS key unless the "ReplicaKmsKeyArn" environment
                variable is set. Alternatively, you can also create the key manually
                in the replica region with the same name'')'
              - ''
              - "            smTarget.create_secret("
              - "                Name = secretName,"
              - "                ClientRequestToken = currentVersion,"
              - "                KmsKeyId = replicaKmsKeyArn,"
              - "                SecretString = newSecret['SecretString'],"
              - "                Description = secretMeta['Description']"
              - "            )"
              - "        else:"
              - "            smTarget.create_secret("
              - "                Name = secretName,"
              - "                ClientRequestToken = currentVersion,"
              - "                SecretString = newSecret['SecretString'],"
              - "                Description = secretMeta['Description']"
              - "            )"
              - "    else:"
              - "        secretMeta = smTarget.describe_secret(SecretId = secretName)"
              - "        for previousVersion, labelList in secretMeta['VersionIdsToStages'].items():"
              - "            if 'AWSCURRENT' in labelList and previousVersion != currentVersion:"
              - '                print(''Moving "AWSCURRENT" label from version "{0}"
                to new version "{1}"''.format(previousVersion, currentVersion))'
              - "                smTarget.update_secret_version_stage("
              - "                    SecretId = secretName,"
              - "                    VersionStage = 'AWSCURRENT',"
              - "                    MoveToVersionId = currentVersion,"
              - "                    RemoveFromVersionId = previousVersion"
              - "                )"
              - "                break"
              - ''
              - '    print(''Secret {0} replicated successfully to region "{1}"''.format(secretName,
                targetRegion))'
    ReplicatorEventTrigger:
      Condition: ReplicateSecretsCrossRegion   
      DependsOn: rMyRDSSecret
      Type: AWS::Events::Rule
      Properties:
        Name: SecretsManagerCrossRegionReplicator
        Description: Triggers a lambda function to replicate a new version of a secret
          whenever a secret completes rotation
        State: ENABLED
        Targets:
        - Arn:
            Fn::GetAtt:
            - ReplicatorLambdaFunction
            - Arn
          Id:
            Fn::Select:
            - 2
            - Fn::Split:
              - "/"
              - Ref: AWS::StackId
        EventPattern:
          source:
          - aws.secretsmanager
          detail-type:
          - AWS Service Event via CloudTrail
          detail:
            eventSource:
            - secretsmanager.amazonaws.com
            eventName:
            - RotationSucceeded
    ReplicatorLambdaPermission:
      Condition: ReplicateSecretsCrossRegion    
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - ReplicatorLambdaFunction
          - Arn
        Principal: events.amazonaws.com
        SourceArn:
          Fn::GetAtt:
          - ReplicatorEventTrigger
          - Arn
  
        
Outputs:
    MasterDBId:
      Description: MasterDB instance id
      Value: !Ref rMasterDb
      Export:
        Name: !Sub "${pgDBName}-MasterDb"
    DBUsername:
      Description: 'Database master username'
      Value: !Ref pgMasterUser
    MasterDBEndpoint:
      Description: 'Postgres Master Endpoint'
      Value: !GetAtt 'rMasterDb.Endpoint.Address'
    PSQLCommandLine:    
      Description: PSQL Command Line to Connect DB a PW is required from secretsmanager
      Value: !Join
               - ''
               - - 'psql --host='
                 - !GetAtt 'rMasterDb.Endpoint.Address' 
                 - ' --port='
                 - !GetAtt 'rMasterDb.Endpoint.Port'
                 - ' --username='
                 - !Ref pgMasterUser
                 - ' --dbname='
                 - !Ref pgDBName     

    RoleId:
      Description: The logical ID of the IAM role
      Value: !Ref RDSDBAAwsMonitoringAccountRole
    RoleArn:
      Description: The ARN of the IAM role
      Value: !GetAtt [RDSDBAAwsMonitoringAccountRole, Arn]
    PolicyId:
      Description: The logical ID of the IAM policy
      Value: !Ref RDSDBAAwsMonitoringAccountPolicy
